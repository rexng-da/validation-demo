module Partner where

import DA.Validation
import DA.Traversable qualified as T
import ValidationX
import Bet

template Partner 
  with
    creator : Party
    partnerId : Int
  where
    signatory creator

    key (creator, partnerId) : (Party, Int)
    maintainer key._1

    nonconsuming choice ValidatePartner : Validation Text Bet
      with
        bet : Bet
      controller creator
      do
        let partnerContractKey = (creator, bet.partnerId)

        let validatePartner partner =
              if bet.partnerId /= partner.partnerId
              then invalid "Partner ID is invalid for bet"
              else ok bet

        partnerCidV <- 
          lookupByKeyV @Partner "Partner contract not found" partnerContractKey

        partnerContract <- T.mapA fetch partnerCidV

        -- This is just monadic bind, but there is no Monad instance
        -- for Validation
        case validatePartner <$> partnerContract of
          Errors err -> pure $ Errors err
          Success validatedBet -> pure $ validatedBet
