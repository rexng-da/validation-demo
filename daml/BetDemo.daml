module BetDemo where

import Daml.Script
import DA.Foldable
import DA.Validation
import Bet
import Partner
import Product
import WagerEvent

-- missing ingredient from DA.Validation
instance Semigroup (Validation err succ) where
  Errors xs <> Errors ys = Errors (xs <> ys)
  Success _ <> x = x
  x <> Success _ = x

test : Script ()
test = do
  -- user_setup_begin
  rex <- allocatePartyWithHint "Rex" (PartyIdHint "Rex")
  rexId <- validateUserId "rex"
  createUser (User rexId (Some rex)) [CanActAs rex]
  -- user_setup_end

  -- set up initial bet, not in ledger yet because it's unvalidated
  let bet = Bet with
          amount = 1.0
          productId = 1
          partnerId = 1
          bettor = rex

  -- set up initial contracts for WagerEvent, Product, and Partner
  wagerEvent <- rex `submit` createCmd WagerEvent with
      creator = rex

  partner <- rex `submit` createCmd Partner with
      creator = rex

  product <- rex `submit` createCmd Product with
      creator = rex

  -- group all validations as a list of script of validations
  let scripts = [ 
        (rex `submit` exerciseCmd partner ValidatePartner with bet = bet), 
        (rex `submit` exerciseCmd product ValidateProductId with bet = bet),
        (rex `submit` exerciseCmd wagerEvent ValidateWagerEvent with bet = bet) ]
  
  -- lists are traversable, flip it to be a script of lists of validations
  -- and bind the result to 'validations'
  validations <- sequence scripts

  -- take advantage of the Semigroup implementation above
  let result = foldl1 (<>) validations

  debug result

  pure ()
