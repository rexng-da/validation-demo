module BetDemo where

import DA.Foldable qualified as F
import Daml.Script
import Bet
import Partner
import Product
import WagerEvent

test : Script ()
test = do
  -- user_setup_begin
  partner1 <- allocatePartyWithHint "Partner1" (PartyIdHint "Partner1")
  hkjc <- allocatePartyWithHint "Hkjc" (PartyIdHint "Hkjc")
  -- user_setup_end

  -- set up initial bet, not in ledger yet because it's unvalidated
  let bet = Bet with
          amount = 1.0
          productId = 1
          partnerId = -1
          bettor = partner1

  -- set up initial contracts for WagerEvent, Product, and Partner
  wagerEvent <- hkjc `submit` createCmd WagerEvent with
      creator = hkjc

  partner <- hkjc `submit` createCmd Partner with
      partnerId = -1
      creator = hkjc

  product <- hkjc `submit` createCmd Product with
      creator = hkjc

  -- group all validations as a list of script of validations
  let scripts = [ 
        (hkjc `submit` exerciseCmd partner ValidatePartner with bet = bet), 
        (hkjc `submit` exerciseCmd product ValidateProductId with bet = bet),
        (hkjc `submit` exerciseCmd wagerEvent ValidateWagerEvent with bet = bet) ]
  
  -- lists are traversable, flip it to be a script of lists of validations
  -- and bind the result to 'validations'
  validations <- sequence scripts

  -- take advantage of the Semigroup implementation above
  let result = F.foldl1 (*>) validations

  debug result

  pure ()
